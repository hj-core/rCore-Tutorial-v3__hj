"""
This module is intended for building user apps with varying entry addresses.

The apps are processed in sorted name order, and test apps, i.e., apps
starting with "test_", are included only if the environment variable
"TEST" is set to 1. For each app, it generates the corresponding linker.ld
and builds the binary file. The arguments passed to it are redirected to
the cargo build command.
"""

import os
import subprocess
import sys
from pathlib import Path

_APP_SRC_DIR = "src/bin"
_APP_BASE_ADDR_0 = 0x8040_0000
_APP_MAX_SIZE = 0x2_0000

_LINKER_PATH = "src/linker.ld"

_LINKER_TEMPLATE = """# This file is auto-generated by build.py
OUTPUT_ARCH(riscv)
ENTRY(_start)
APP_BASE = {app_base};

SECTIONS
{{
    . = APP_BASE;

    .text : {{
        *(.text.entry)
        *(.text .text.*)
    }}
    . = ALIGN(4K);

    .rodata : {{
        *(.rodata .rodata.*)
        *(.srodata .srodata.*)
    }}
    . = ALIGN(4K);

    .data : {{
        *(.data .data.*)
        *(.sdata .sdata.*)
    }}
    . = ALIGN(4K);

    bss_start = .;
    .bss : {{
        *(.bss .bss.*)
        *(.sbss .sbss.*)
    }}
    . = ALIGN(4K);
    bss_end = .;

    /DISCARD/ : {{
        *(.eh_frame)
    }}
}}
"""


def main():
    app_names = _collect_app_names()
    app_names.sort()

    for i, name in enumerate(app_names):
        print("Building", name, "...")
        _write_linker_file(i)
        _cargo_build(name)


def _collect_app_names() -> list[str]:
    include_test = os.environ.get("TEST", "0") == "1"
    return [
        p.name.removesuffix(".rs")
        for p in Path(_APP_SRC_DIR).iterdir()
        if p.is_file() and p.suffix == ".rs"
        if include_test or not p.name.startswith("test_")
    ]


def _write_linker_file(_app_index: int):
    app_base = _compute_app_base(_app_index)

    linker_file = Path(_LINKER_PATH)
    linker_file.write_text(
        _LINKER_TEMPLATE.format(app_base=hex(app_base)), encoding="utf-8"
    )


def _compute_app_base(_app_index: int) -> int:
    return _APP_BASE_ADDR_0


def _cargo_build(app_name: str):
    cmd = ["cargo", "build"]
    cmd.extend(sys.argv[1:])
    cmd.append(app_name)
    subprocess.run(cmd, check=True)


if __name__ == "__main__":
    main()
